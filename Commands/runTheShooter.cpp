// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "runTheShooter.h"
runTheShooter::runTheShooter() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void runTheShooter::Initialize()
{
	RobotMap::shooterMotor->SetPID(0.75, 0.00266, 0.01);
	RobotMap::shooterMotor->SetSpeedReference(CANJaguar::kSpeedRef_Encoder);
	RobotMap::shooterMotor->ConfigEncoderCodesPerRev(2);
	RobotMap::shooterMotor->ConfigMaxOutputVoltage(4);
	RobotMap::shooterMotor->EnableControl();
	RobotMap::shooterMotor->Set(1000);
	printf("PID Initialized! \n");
	
}
// Called repeatedly when this Command is scheduled to run
void runTheShooter::Execute()
{
	printf("Control Mode: %d Voltage: %f Speed: %f Faults: %d\n",
			 RobotMap::shooterMotor->GetControlMode(),
			 RobotMap::shooterMotor->GetOutputVoltage(),
			 RobotMap::shooterMotor->GetSpeed(),
			 RobotMap::shooterMotor->GetFaults());
}
// Make this return true when this Command no longer needs to run execute()
bool runTheShooter::IsFinished()
{
	return false;
}
// Called once after isFinished returns true
void runTheShooter::End()
{
	RobotMap::shooterMotor->StopMotor();
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void runTheShooter::Interrupted() {
}
