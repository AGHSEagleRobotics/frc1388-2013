// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::driveTrainDriveLeft1 = NULL;
SpeedController* RobotMap::driveTrainDriveLeft2 = NULL;
SpeedController* RobotMap::driveTrainDriveRight1 = NULL;
SpeedController* RobotMap::driveTrainDriveRight2 = NULL;
RobotDrive* RobotMap::driveTrainRobotDrive41 = NULL;
Servo* RobotMap::feederFeederServo = NULL;
SpeedController* RobotMap::climberClimberMotor = NULL;
DigitalInput* RobotMap::climberTapeLimitLeft = NULL;
DigitalInput* RobotMap::climberTapeLimitRight = NULL;
Servo* RobotMap::climberTapeAngleLeft = NULL;
Servo* RobotMap::climberTapeAngleRight = NULL;
Encoder* RobotMap::pIDShooterLightEncoder = NULL;
CANJaguar* RobotMap::pIDShooterShooterMotor = NULL;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();
	driveTrainDriveLeft1 = new Victor(1, 1);
	lw->AddActuator("DriveTrain", "DriveLeft1", (Victor*) driveTrainDriveLeft1);
	
	driveTrainDriveLeft2 = new Victor(1, 2);
	lw->AddActuator("DriveTrain", "DriveLeft2", (Victor*) driveTrainDriveLeft2);
	
	driveTrainDriveRight1 = new Victor(1, 3);
	lw->AddActuator("DriveTrain", "DriveRight1", (Victor*) driveTrainDriveRight1);
	
	driveTrainDriveRight2 = new Victor(1, 4);
	lw->AddActuator("DriveTrain", "DriveRight2", (Victor*) driveTrainDriveRight2);
	
	driveTrainRobotDrive41 = new RobotDrive(driveTrainDriveLeft1, driveTrainDriveLeft2,
              driveTrainDriveRight1, driveTrainDriveRight2);
	
	driveTrainRobotDrive41->SetSafetyEnabled(true);
        driveTrainRobotDrive41->SetExpiration(0.1);
        driveTrainRobotDrive41->SetSensitivity(0.5);
        driveTrainRobotDrive41->SetMaxOutput(1.0);
	feederFeederServo = new Servo(1, 8);
	lw->AddActuator("Feeder", "FeederServo", feederFeederServo);
	
	climberClimberMotor = new Victor(1, 5);
	lw->AddActuator("Climber", "ClimberMotor", (Victor*) climberClimberMotor);
	
	climberTapeLimitLeft = new DigitalInput(1, 1);
	lw->AddSensor("Climber", "TapeLimitLeft", climberTapeLimitLeft);
	
	climberTapeLimitRight = new DigitalInput(1, 2);
	lw->AddSensor("Climber", "TapeLimitRight", climberTapeLimitRight);
	
	climberTapeAngleLeft = new Servo(1, 6);
	lw->AddActuator("Climber", "TapeAngleLeft", climberTapeAngleLeft);
	
	climberTapeAngleRight = new Servo(1, 7);
	lw->AddActuator("Climber", "TapeAngleRight", climberTapeAngleRight);
	
	pIDShooterLightEncoder = new Encoder(1, 3, 1, 4, false, Encoder::k4X);
	lw->AddSensor("PIDShooter", "LightEncoder", pIDShooterLightEncoder);
	pIDShooterLightEncoder->SetDistancePerPulse(1.0);
        pIDShooterLightEncoder->SetPIDSourceParameter(Encoder::kRate);
        pIDShooterLightEncoder->Start();
	pIDShooterShooterMotor = new CANJaguar(3);
	
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
