// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Climber.h"
#include "../Robotmap.h"
#include "../Commands/Climb.h"
#define CLIMBER_MOTOR_POWER (0.2)
Climber::Climber() : Subsystem("Climber") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	climberMotor = RobotMap::climberClimberMotor;
	tapeLimitLeft = RobotMap::climberTapeLimitLeft;
	tapeLimitRight = RobotMap::climberTapeLimitRight;
	tapeAngleLeft = RobotMap::climberTapeAngleLeft;
	tapeAngleRight = RobotMap::climberTapeAngleRight;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void Climber::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new Climb());
}
// Put methods for controlling this subsystem(new Climber())->TapesUpDown();
// here. Call these from Commands.
void Climber::TapesInOut(float opstickx, bool opTapesIn, bool opTapesOut){
/*
 * This is the code for using the opstick x axis.
 * 
	if ( opstickx < 0 && tapeLimitLeft == false && tapeLimitRight == false)
	{
		climberMotor->Set(opstickx);
	}
	
	if ( opstickx > 0){
		climberMotor->Set(opstickx);
	}
	
*/		
	// && tapeLimitLeft == false && tapeLimitRight == false FOR LATE
	
<<<<<<< HEAD

=======
>>>>>>> b1022992595f18c9b629a70617d89ce35115d77e
if (opTapesIn == true )
	{
		
		climberMotor->Set(-CLIMBER_MOTOR_POWER);
	}	
else if (opTapesOut == true)
	{
		
		climberMotor->Set(CLIMBER_MOTOR_POWER);
	}
else 
	{
		
		climberMotor->Set(0);
	}
}
void Climber::TapesUpDown(float opsticky)
	{        
		int makepositive = 1;
		float scalingfactor = .25; //take the value range from 0-2 to 1/4 of that to be between 0-1 for input
		opsticky = (opsticky + makepositive)*scalingfactor;
		tapeAngleLeft->Set(opsticky);        
		tapeAngleRight->Set(opsticky);
	}
